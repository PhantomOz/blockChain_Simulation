"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const transactions_1 = __importDefault(require("../handlers/transactions"));
const router = (0, express_1.Router)();
/**
 * @swagger
 * components:
 *   schemas:
 *     Transaction:
 *       type: object
 *       required:
 *         - walletId
 *         - amount
 *         - to
 *         - type
 *         - code
 *       properties:
 *          _id:
 *              type: string
 *              description: The autogenerated id of the User
 *          walletId:
 *              type: string
 *              description: The id of the wallet carrying out the transaction
 *          amount:
 *              type: number
 *              description: The amount to be transferred
 *          to:
 *              type: string
 *              description: The wallet address you are transacting with
 *          type:
 *              type: string
 *              description: The type of transaction you are carrying out
 *          desc:
 *              type: string
 *              description: The description of the transaction
 *          code:
 *              type: string
 *              description: The currency code of the transaction
 *          createdAt:
 *              type: Date
 *              description: The date the user was created
 */
/**
 * @swagger
 * /api/transactions:
 *  get:
 *    summary: Returns a list of all transactions
 *    tags:
 *      - Transaction Endpoints
 *    responses:
 *      200:
 *        description: successful
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Transaction'
 *      404:
 *         description: not found
 *      500:
 *         description: internal server error
 *  post:
 *     summary: Create a new Transaction
 *     tags:
 *         - Transaction Endpoints
 *     description: Sends request to the server to create a new Transaction
 *     requestBody:
 *         required: true
 *         content:
 *             application/json:
 *                schema:
 *                     type: object
 *                     properties:
 *                          walletId:
 *                              type: string
 *                              example: V&7ududw97e97whwc
 *                          amount:
 *                              type: number
 *                              example: 3.24
 *                          to:
 *                              type: string
 *                              example: 0xCdefweferf242893nh2fjejie
 *                          type:
 *                              type: string
 *                              example: debit
 *                          desc:
 *                              type: string
 *                              example: refund
 *                          code:
 *                              type: string
 *                              example: BTC
 *
 *     responses:
 *          201:
 *             description: Success
 *             content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          properties:
 *                              message:
 *                                  type: string
 *                                  example: success
 *          400:
 *              description: Bad Request
 *          500:
 *              description: Internal server error
 * /api/transactions/{walletId}:
 *  get:
 *    summary: Returns a list of all transactions of a wallet
 *    tags:
 *       - Transaction Endpoints
 *    parameters:
 *      - in: path
 *        name: walletId
 *        schema:
 *          type: string
 *        required: true
 *        description: walletId of the wallet to get transactions of
 *    responses:
 *      200:
 *        description: successful
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Transaction'
 *      404:
 *         description: not found
 *      500:
 *         description: internal server error
 */
(0, transactions_1.default)(router);
exports.default = router;
